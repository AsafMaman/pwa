{"version":3,"sources":["components/todo/add-todo.js","components/todo/layout.js","components/todo/todo-list-item.js","components/todo/todo-list.js","App.js","components/todo/hooks/form.js","components/todo/hooks/todo.js","serviceWorker.js","index.js"],"names":["AddTodo","memo","props","Paper","style","margin","padding","Grid","container","xs","md","item","paddingRight","TextField","placeholder","value","inputValue","onChange","onInputChange","onKeyPress","onInputKeyPress","fullWidth","Button","color","variant","onClick","onButtonClick","Layout","elevation","backgroundColor","AppBar","position","height","Toolbar","Typography","children","TodoListItem","ListItem","divider","Checkbox","onCheckBoxToggle","checked","disableRipple","ListItemText","primary","text","ListItemSecondaryAction","IconButton","aria-label","TodoList","items","length","List","overflow","map","todo","index","key","onItemRemove","onItemCheck","TodoApp","initialValue","useState","setInputValue","changeInput","event","target","clearInput","keyInput","callback","which","keyCode","useInputValue","todos","setTodos","addTodo","concat","checkTodo","idx","removeTodo","id","filter","useTodos","clearInputAndAddTodo","_","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d27b0b59.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Button, Grid, Paper, TextField } from '@material-ui/core';\n\nconst AddTodo = memo(props => (\n    <Paper style={{ margin: 16, padding: 16 }}>\n        <Grid container>\n            <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n                <TextField\n                    placeholder=\"Add Todo here\"\n                    value={props.inputValue}\n                    onChange={props.onInputChange}\n                    onKeyPress={props.onInputKeyPress}\n                    fullWidth\n                />\n            </Grid>\n            <Grid xs={2} md={1} item>\n                <Button fullWidth color=\"primary\" variant=\"text\" onClick={props.onButtonClick}>\n                    Add\n                </Button>\n            </Grid>\n        </Grid>\n    </Paper>\n));\n\nexport default AddTodo;\n","import React, { memo } from 'react';\nimport { AppBar, Paper, Toolbar, Typography } from '@material-ui/core';\n\nconst Layout = memo(props => (\n    <Paper elevation={0} style={{ padding: 0, margin: 0, backgroundColor: '#fafafa' }}>\n        <AppBar color=\"primary\" position=\"static\" style={{ height: 64 }}>\n            <Toolbar style={{ height: 64 }}>\n                <Typography variant=\"h5\" color=\"inherit\">\n                    Simple React Todo App with Hooks\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        {props.children}\n    </Paper>\n));\n\nexport default Layout;\n","import { Checkbox, IconButton, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport Delete from '@material-ui/icons/Delete';\nimport React, { memo } from 'react';\n\nconst TodoListItem = memo(props => (\n  <ListItem divider={props.divider}>\n    <Checkbox onClick={props.onCheckBoxToggle} checked={props.checked} disableRipple />\n    <ListItemText primary={props.text} />\n    <ListItemSecondaryAction>\n      <IconButton aria-label=\"Delete Todo\" onClick={props.onButtonClick}>\n        <Delete />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>\n));\n\nexport default TodoListItem;\n","import React, { memo } from 'react';\nimport { List, Paper } from '@material-ui/core';\n\nimport TodoListItem from './todo-list-item';\n\nconst TodoList = memo(props => (\n    <>\n        {props.items.length > 0 && (\n            <Paper style={{ margin: 16 }}>\n                <List style={{ overflow: 'scroll' }}>\n                    {props.items.map((todo, index) => (\n                        <TodoListItem\n                            {...todo}\n                            key={`TodoItem.${index}`}\n                            divider={index !== props.items.length - 1}\n                            onButtonClick={() => props.onItemRemove(index)}\n                            onCheckBoxToggle={() => props.onItemCheck(index)}\n                        />\n                    ))}\n                </List>\n            </Paper>\n        )}\n    </>\n));\n\nexport default TodoList;\n","import React, { memo } from 'react';\nimport AddTodo from './components/todo/add-todo';\nimport { useInputValue, useTodos } from './components/todo/hooks';\nimport Layout from './components/todo/layout';\nimport TodoList from './components/todo/todo-list';\n\nconst TodoApp = memo(props => {\n  const { inputValue, changeInput, clearInput, keyInput } = useInputValue();\n  const { todos, addTodo, checkTodo, removeTodo } = useTodos();\n\n  const clearInputAndAddTodo = _ => {\n    clearInput();\n    addTodo(inputValue);\n  };\n\n  return (\n    <Layout>\n      <AddTodo\n        inputValue={inputValue}\n        onInputChange={changeInput}\n        onButtonClick={clearInputAndAddTodo}\n        onInputKeyPress={event => keyInput(event, clearInputAndAddTodo)}\n      />\n      <TodoList items={todos} onItemCheck={idx => checkTodo(idx)} onItemRemove={idx => removeTodo(idx)} />\n    </Layout>\n  );\n});\n\nexport default TodoApp;\n","// Filename: hooks/form.js\n\nimport { useState } from 'react';\n\nexport const useInputValue = (initialValue = '') => {\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  return {\n    inputValue,\n    changeInput: event => setInputValue(event.target.value),\n    clearInput: () => setInputValue(''),\n    keyInput: (event, callback) => {\n      if (event.which === 13 || event.keyCode === 13) {\n        callback(inputValue);\n        return true;\n      }\n\n      return false;\n    }\n  };\n};\n","// Filename: hooks/todos.js\nimport { useState } from 'react';\n\nexport const useTodos = (initialValue = []) => {\n  const [todos, setTodos] = useState(initialValue);\n  return {\n    todos,\n    addTodo: text => {\n      if (text !== '') {\n        setTodos(\n          todos.concat({\n            text,\n            checked: false\n          })\n        );\n      }\n    },\n    checkTodo: index => {\n      setTodos(\n        todos.map((todo, idx) => {\n          if (index === idx) {\n            todo.checked = !todo.checked;\n          }\n          return todo;\n        })\n      );\n    },\n    removeTodo(id) {\n      setTodos(todos.filter((todo, index) => id !== index));\n    }\n  };\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}